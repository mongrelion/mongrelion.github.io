<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Carlos León</title>
    <link>https://carlosleon.info/tags/ruby/</link>
    <description>Recent content in Ruby on Carlos León</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 13 Sep 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://carlosleon.info/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AngularJS, Sinatra and HTML5Mode</title>
      <link>https://carlosleon.info/blog/angular-sinatra-html5mode/</link>
      <pubDate>Fri, 13 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://carlosleon.info/blog/angular-sinatra-html5mode/</guid>
      <description>Sinatra, AngularJS and HTML5Mode The Sinatra Part get &amp;quot;/*&amp;quot; do File.read(File.join(&amp;quot;public&amp;quot;, &amp;quot;index.html&amp;quot;)) end  Put this at the bottom of your application file and this will serve your AngularJS application at any endpoint. This, of course, will read the public/index.html file every time that you head that endpoint. Better if you memoize it.
get &amp;quot;/*&amp;quot; do render_index end def render_index @index ||= File.read(File.join(&amp;quot;public&amp;quot;, &amp;quot;index.html&amp;quot;)) end  Important note Any other route that you register after this snippet won&amp;rsquo;t be triggered as &amp;quot;/*&amp;quot; matches everything.</description>
    </item>
    
    <item>
      <title>Improving (?) my site&#39;s performance: Part II</title>
      <link>https://carlosleon.info/blog/improving-my-sites-performance-part-2/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://carlosleon.info/blog/improving-my-sites-performance-part-2/</guid>
      <description>A couple of weeks ago I decided to internally improve my website. Here I explain exactly what is it that I did to do so. Some of these changes include ruby memoize/memoization and Sinatra Caching.
As I previously mentioned, my blog&amp;rsquo;s architechture is inspired in [@cyx]&amp;rsquo;s personal website. However, I was not totally comfortable with the fact that everytime that a page was requested (a blog post in this case), the application had to go to disk, bring the blgo post, parse the markdown and then render the view.</description>
    </item>
    
    <item>
      <title>Improving (?) my site&#39;s performance: Part I</title>
      <link>https://carlosleon.info/blog/improving-my-sites-performance/</link>
      <pubDate>Sun, 24 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://carlosleon.info/blog/improving-my-sites-performance/</guid>
      <description>When I decided to finally come up with a blog, I gave Jekyll and Octopress a try. Nice plugins, &amp;ldquo;easy&amp;rdquo; deployment strategies and what not, but somehow I could not cope with them. That&amp;rsquo;s why I decided to write my own. At last I am a software developer and building a semi-static website shouldn&amp;rsquo;t be that complicated.
The solution I came up with is inspired by @cyx&amp;rsquo;s personal website, although now I seriously am thinking about refactoring a couple stuff here and there.</description>
    </item>
    
    <item>
      <title>Method stub with MiniTest</title>
      <link>https://carlosleon.info/blog/method-stub-with-minitest/</link>
      <pubDate>Thu, 24 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://carlosleon.info/blog/method-stub-with-minitest/</guid>
      <description>MiniTest is a testing tool that provides the necessary resources to make your test suite a complete stack, supporting TDD, BDD, mocking and benchmarking. It comes by default with Ruby 1.9.x and is also available for Ruby 1.8.7.
It provides two styles of testing: Unit tests and Specs. I personally prefer Specs since they are easier to read. Find out more about this on the documentation site. If you&amp;rsquo;re not yet using it, I suggest you to give it a try.</description>
    </item>
    
  </channel>
</rss>